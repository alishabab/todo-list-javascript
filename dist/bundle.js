!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){!function(t,n){var o={version:"2.11.2",areas:{},apis:{},inherit:function(e,t){for(var n in e)t.hasOwnProperty(n)||Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n));return t},stringify:function(e){return void 0===e||"function"==typeof e?e+"":JSON.stringify(e)},parse:function(e,t){try{return JSON.parse(e,t||o.revive)}catch(t){return e}},fn:function(e,t){for(var n in o.storeAPI[e]=t,o.apis)o.apis[n][e]=t},get:function(e,t){return e.getItem(t)},set:function(e,t,n){e.setItem(t,n)},remove:function(e,t){e.removeItem(t)},key:function(e,t){return e.key(t)},length:function(e){return e.length},clear:function(e){e.clear()},Store:function(e,t,n){var r=o.inherit(o.storeAPI,(function(e,t,n){return 0===arguments.length?r.getAll():"function"==typeof t?r.transact(e,t,n):void 0!==t?r.set(e,t,n):"string"==typeof e||"number"==typeof e?r.get(e):"function"==typeof e?r.each(e):e?r.setAll(e,t):r.clear()}));r._id=e;try{t.setItem("_-bad-_","wolf"),r._area=t,t.removeItem("_-bad-_")}catch(e){}return r._area||(r._area=o.storage("fake")),r._ns=n||"",o.areas[e]||(o.areas[e]=r._area),o.apis[r._ns+r._id]||(o.apis[r._ns+r._id]=r),r},storeAPI:{area:function(e,t){var n=this[e];return n&&n.area||(n=o.Store(e,t,this._ns),this[e]||(this[e]=n)),n},namespace:function(e,t){if(!e)return this._ns?this._ns.substring(0,this._ns.length-1):"";var n=e,r=this[n];if(!(r&&r.namespace||(r=o.Store(this._id,this._area,this._ns+n+"."),this[n]||(this[n]=r),t)))for(var i in o.areas)r.area(i,o.areas[i]);return r},isFake:function(){return"fake"===this._area.name},toString:function(){return"store"+(this._ns?"."+this.namespace():"")+"["+this._id+"]"},has:function(e){return this._area.has?this._area.has(this._in(e)):!!(this._in(e)in this._area)},size:function(){return this.keys().length},each:function(e,t){for(var n=0,r=o.length(this._area);n<r;n++){var i=this._out(o.key(this._area,n));if(void 0!==i&&!1===e.call(this,i,this.get(i),t))break;r>o.length(this._area)&&(r--,n--)}return t||this},keys:function(e){return this.each((function(e,t,n){n.push(e)}),e||[])},get:function(e,t){var n,r=o.get(this._area,this._in(e));return"function"==typeof t&&(n=t,t=null),null!==r?o.parse(r,n):null!=t?t:r},getAll:function(e){return this.each((function(e,t,n){n[e]=t}),e||{})},transact:function(e,t,n){var o=this.get(e,n),r=t(o);return this.set(e,void 0===r?o:r),this},set:function(e,t,n){var r=this.get(e);return null!=r&&!1===n?t:o.set(this._area,this._in(e),o.stringify(t),n)||r},setAll:function(e,t){var n,o;for(var r in e)o=e[r],this.set(r,o,t)!==o&&(n=!0);return n},add:function(e,t){var n=this.get(e);if(n instanceof Array)t=n.concat(t);else if(null!==n){var r=typeof n;if(r===typeof t&&"object"===r){for(var i in t)n[i]=t[i];t=n}else t=n+t}return o.set(this._area,this._in(e),o.stringify(t)),t},remove:function(e,t){var n=this.get(e,t);return o.remove(this._area,this._in(e)),n},clear:function(){return this._ns?this.each((function(e){o.remove(this._area,this._in(e))}),1):o.clear(this._area),this},clearAll:function(){var e=this._area;for(var t in o.areas)o.areas.hasOwnProperty(t)&&(this._area=o.areas[t],this.clear());return this._area=e,this},_in:function(e){return"string"!=typeof e&&(e=o.stringify(e)),this._ns?this._ns+e:e},_out:function(e){return this._ns?e&&0===e.indexOf(this._ns)?e.substring(this._ns.length):void 0:e}},storage:function(e){return o.inherit(o.storageAPI,{items:{},name:e})},storageAPI:{length:0,has:function(e){return this.items.hasOwnProperty(e)},key:function(e){var t=0;for(var n in this.items)if(this.has(n)&&e===t++)return n},setItem:function(e,t){this.has(e)||this.length++,this.items[e]=t},removeItem:function(e){this.has(e)&&(delete this.items[e],this.length--)},getItem:function(e){return this.has(e)?this.items[e]:null},clear:function(){for(var e in this.items)this.removeItem(e)}}},r=o.Store("local",function(){try{return localStorage}catch(e){}}());r.local=r,r._=o,r.area("session",function(){try{return sessionStorage}catch(e){}}()),r.area("page",o.storage("page")),"function"==typeof n&&void 0!==n.amd?n("store2",[],(function(){return r})):e.exports?e.exports=r:(t.store&&(o.conflict=t.store),t.store=r)}(this,this&&this.define)},function(e,t,n){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},o=[],r=0;r<e.length;r++){var i=e[r],c=t.base?i[0]+t.base:i[0],l=n[c]||0,d="".concat(c," ").concat(l);n[c]=l+1;var u=s(d),f={css:i[1],media:i[2],sourceMap:i[3]};-1!==u?(a[u].references++,a[u].updater(f)):a.push({identifier:d,updater:p(f,t),references:1}),o.push(d)}return o}function l(e){var t=document.createElement("style"),o=e.attributes||{};if(void 0===o.nonce){var r=n.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(e){t.setAttribute(e,o[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var d,u=(d=[],function(e,t){return d[e]=t,d.filter(Boolean).join("\n")});function f(e,t,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(e.styleSheet)e.styleSheet.cssText=u(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function h(e,t,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?e.setAttribute("media",r):e.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}var m=null,v=0;function p(e,t){var n,o,r;if(t.singleton){var i=v++;n=m||(m=l(t)),o=f.bind(null,n,i,!1),r=f.bind(null,n,i,!0)}else n=l(t),o=h.bind(null,n,t),r=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var o=0;o<n.length;o++){var r=s(n[o]);a[r].references--}for(var i=c(e,t),l=0;l<n.length;l++){var d=s(n[l]);0===a[d].references&&(a[d].updater(),a.splice(d,1))}n=i}}}},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),i=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([r]).join("\n")}var a,s,c;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,o){"string"==typeof e&&(e=[[null,e,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},function(e,t,n){var o=n(1),r=n(4);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,t,n){(t=n(2)(!1)).push([e.i,'.modal{font-family:-apple-system,BlinkMacSystemFont,avenir next,avenir,helvetica neue,helvetica,ubuntu,roboto,noto,segoe ui,arial,sans-serif}.modal__overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,.6);display:flex;justify-content:center;align-items:center}.modal__container{background-color:#fff;padding:30px;max-width:500px;max-height:100vh;border-radius:4px;overflow-y:auto;box-sizing:border-box}.modal__header{display:flex;justify-content:space-between;align-items:center}.modal__title{margin-top:0;margin-bottom:0;font-weight:600;font-size:1.25rem;line-height:1.25;color:#00449e;box-sizing:border-box}.modal__close{background:transparent;border:0}.modal__header .modal__close::before{content:"✕"}.modal__content{margin-top:2rem;margin-bottom:2rem;line-height:1.5;color:rgba(0,0,0,.8)}.modal__btn{font-size:.875rem;padding-left:1rem;padding-right:1rem;padding-top:.5rem;padding-bottom:.5rem;background-color:#e6e6e6;color:rgba(0,0,0,.8);border-radius:.25rem;border-style:none;border-width:0;cursor:pointer;-webkit-appearance:button;text-transform:none;overflow:visible;line-height:1.15;margin:0;will-change:transform;-moz-osx-font-smoothing:grayscale;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform:translateZ(0);transform:translateZ(0);transition:-webkit-transform .25s ease-out;transition:transform .25s ease-out;transition:transform .25s ease-out,-webkit-transform .25s ease-out}.modal__btn:focus,.modal__btn:hover{-webkit-transform:scale(1.05);transform:scale(1.05)}.modal__btn-primary{background-color:#00449e;color:#fff}@keyframes mmfadeIn{from{opacity:0}to{opacity:1}}@keyframes mmfadeOut{from{opacity:1}to{opacity:0}}@keyframes mmslideIn{from{transform:translateY(15%)}to{transform:translateY(0)}}@keyframes mmslideOut{from{transform:translateY(0)}to{transform:translateY(-10%)}}.micromodal-slide{display:none}.micromodal-slide.is-open{display:block}.micromodal-slide .modal__container,.micromodal-slide .modal__overlay{will-change:transform}.micromodal-slide[aria-hidden=false] .modal__overlay{animation:mmfadeIn .3s cubic-bezier(0, 0, 0.2, 1)}.micromodal-slide[aria-hidden=false] .modal__container{animation:mmslideIn .3s cubic-bezier(0, 0, 0.2, 1)}.micromodal-slide[aria-hidden=true] .modal__overlay{animation:mmfadeOut .3s cubic-bezier(0, 0, 0.2, 1)}.micromodal-slide[aria-hidden=true] .modal__container{animation:mmslideOut .3s cubic-bezier(0, 0, 0.2, 1)}',""]),e.exports=t},function(e,t,n){var o=n(1),r=n(6);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);e.exports=r.locals||{}},function(e,t,n){(t=n(2)(!1)).push([e.i,"*{box-sizing:border-box}.todo-list-items{list-style-type:none;text-decoration:underline;color:blue;cursor:pointer}button{cursor:pointer}",""]),e.exports=t},function(e,t,n){"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function r(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}n.r(t);var a,s,c,l,d,u=(a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],s=function(){function e(t){var n=t.targetModal,o=t.triggers,i=void 0===o?[]:o,a=t.onShow,s=void 0===a?function(){}:a,c=t.onClose,l=void 0===c?function(){}:c,d=t.openTrigger,u=void 0===d?"data-micromodal-trigger":d,f=t.closeTrigger,h=void 0===f?"data-micromodal-close":f,m=t.openClass,v=void 0===m?"is-open":m,p=t.disableScroll,g=void 0!==p&&p,b=t.disableFocus,y=void 0!==b&&b,_=t.awaitCloseAnimation,w=void 0!==_&&_,k=t.awaitOpenAnimation,E=void 0!==k&&k,C=t.debugMode,x=void 0!==C&&C;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modal=document.getElementById(n),this.config={debugMode:x,disableScroll:g,openTrigger:u,closeTrigger:h,openClass:v,onShow:s,onClose:l,awaitCloseAnimation:w,awaitOpenAnimation:E,disableFocus:y},i.length>0&&this.registerTriggers.apply(this,r(i)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,n,i;return t=e,(n=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];n.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var n=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",n,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var n=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(n),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(a);return Array.apply(void 0,r(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var n=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));n.length>0&&n[0].focus(),0===n.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var n=t.indexOf(document.activeElement);e.shiftKey&&0===n&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&n===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&o(t.prototype,n),i&&o(t,i),e}(),c=null,l=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},d=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var n in t)l(n);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),n=r(document.querySelectorAll("[".concat(t.openTrigger,"]"))),o=function(e,t){var n=[];return e.forEach((function(e){var o=e.attributes[t].value;void 0===n[o]&&(n[o]=[]),n[o].push(e)})),n}(n,t.openTrigger);if(!0!==t.debugMode||!1!==d(n,o))for(var i in o){var a=o[i];t.targetModal=i,t.triggers=r(a),c=new s(t)}},show:function(e,t){var n=t||{};n.targetModal=e,!0===n.debugMode&&!1===l(e)||(c&&c.removeEventListeners(),(c=new s(n)).showModal())},close:function(e){e?c.closeModalById(e):c.closeModal()}});window.MicroModal=u;var f=u,h=n(0),m=n.n(h);var v=class{constructor(e,t){this.title=e,this.description=t,this.todoList=[]}};var p=class{constructor(e,t,n,o=0,r=!1){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.complete=r}};var g=(()=>{const e=document.querySelector("#projects"),t=document.querySelector(".modal__content"),n=document.querySelector(".modal__title");let o=[new v("default","This is the default toDo list")],r=!1;const i=()=>document.querySelector(".modal__btn").click(),a=e=>{for(;e.firstChild;)e.removeChild(e.lastChild)},s=(e,t)=>{e.todoList=e.todoList.filter(e=>e!==t),l(),i()},c=(e,o)=>{a(t),n.textContent=e.title,Object.entries(e).forEach(e=>{const n=document.createElement("p");n.textContent=`${e[0]}: ${e[1]}`,t.appendChild(n)});const r=document.createElement("button"),i=document.createElement("button");r.textContent="Remove Todo",t.appendChild(r),r.addEventListener("click",()=>s(o,e)),i.textContent="Edit Todo",t.appendChild(i),i.addEventListener("click",()=>((e,t)=>{h(!0,t,e)})(o,e))},l=()=>{a(e),window.localStorage.getItem("projects")&&!1===r?(o=m()("projects"),r=!0):m()("projects",o),o.forEach(t=>{const n=document.createElement("h2");n.textContent=t.title,e.appendChild(n);const o=(e=>{const t=document.createElement("ul");return e.todoList.forEach(n=>{const o=document.createElement("li");o.textContent=`${n.title} - Due: ${n.dueDate}`,o.classList.add("todo-list-items"),o.addEventListener("click",()=>c(n,e)),o.setAttribute("data-micromodal-trigger","modal-1"),t.appendChild(o)}),t})(t);e.appendChild(o),f.init()})},d=e=>{e.preventDefault();const t=document.querySelector(".project-title").value,n=document.querySelector(".project-description").value,r=new v(t,n);o.push(r),l(),i()},u=e=>{e.preventDefault();const t=document.querySelector(".todo-project").value,n=o.filter(e=>e.title===t),r=document.querySelector(".todo-title").value,a=document.querySelector(".todo-description").value,s=document.querySelector(".todo-dueDate").value,c=document.querySelector(".todo-priority").value,d=new p(r,a,s,c);n[0].todoList.push(d),l(),i()},h=(e,r,i)=>{a(t);const c=document.createElement("form"),l=document.createElement("select");l.classList.add("todo-project"),[["title","text"],["description","text"],["dueDate","date"],["priority","number"]].forEach(t=>{const n=document.createElement("input");[n.textContent,n.type]=t,e&&(n.value=r[t[0]]),n.classList.add("todo-"+t[0]),c.appendChild(n)}),o.forEach(e=>{const t=document.createElement("option");t.textContent=e.title,l.appendChild(t)}),c.appendChild(l);const d=document.createElement("button");e?(n.textContent="Edit Todo",d.textContent="Finished Edit",d.addEventListener("click",()=>s(i,r))):(n.textContent="Add Todo",d.textContent="Create Todo"),d.addEventListener("click",u),c.appendChild(d),t.appendChild(c)};return{renderProjects:l,createProjectForm:()=>{a(t),n.textContent="Add Project";const e=document.createElement("form");["title","description"].forEach(t=>{const n=document.createElement("input");n.textContent=t,n.classList.add("project-"+t),e.appendChild(n)});const o=document.createElement("button");o.textContent="Create Project",e.appendChild(o),o.addEventListener("click",d),t.appendChild(e)},createTodoForm:h}})();n(3),n(5);document.querySelector(".create-todo-btn").addEventListener("click",()=>g.createTodoForm(!1,{},{})),document.querySelector(".create-project-btn").addEventListener("click",g.createProjectForm),g.renderProjects()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,